#include "macro.h"
#include "precalculated.h"

#include <iostream>
#include <bitset>
#include <map>

#include <vector>

std::vector<map> vs = { 0x60800004203010,
0x2000380201000008,
0x4409008012,
0x402002305c080008,
0x10c4048800000082,
0x80080000000,
0x30c140024400080,
0x801000802000,
0x8001810200420,
0x780a080080080056,
0x204800e1010000,
0x40105202020100,
0x8002a200024200,
0x244440108208000,
0x4010010000080001,
0xc10140000002840,
0x8000000800a400,
0x480040511122002,
0x128000100040,
0x9002041009000030,
0x108800020040010,
0x50000060400300,
0x2000041320800210,
0x2000630420000000,
0x5400880202010800,
0x8000805c00400000,
0x10020480e410000,
0x10480100226009a8,
0x10040000000400,
0x8000488008200080,
0x8000850000040440,
0x240420005810,
0x9300070000204002,
0x1000430100100082,
0x1001400000140840,
0x88c44004002000,
0x1208000001,
0x808008040002020,
0x500000280004004,
0x1a04002000001043,
0x9080540080300301,
0x40a00200840082,
0x80402000100880,
0x3000a000010000,
0x801a0105000424,
0x2000100000402,
0x824c220000060680,
0x12000018200000a0,
0x6008011004000800,
0x40180210122000c2,
0x5000500208000008,
0x42082000000030a,
0x4441004002904008,
0xa000c444a0925000,
0x400090400c004181,
0x2000020800220040,
0x206300a200c50600,
0xac000030000082,
0x4080000040000800,
0x40801910d4004,
0x2008416400210,
0x8b40800050200,
0x1020210000040180,
0x102000028023100, };

int main() {

	initPawnAttack();
	initKnightAttack();
	initKingAttack();
	initRelevantBishopBlocker();

	std::string s; 
	Magic a; 

	for (int j = 0; j < 64; ++j) {
		const bit pos = indexSquare[j];

		const bit relBlockers = relevantBishopBlocker[j]; 
		std::cout << "next position: " << j << std::endl; 
		//loop through combination of each blocker 
		int numBit = getNumBit(relBlockers); 
		for (int i = 0; i < numBit; ++i) {
			const bit comb = a.mapCombination(i, relBlockers); 

			const bit attackRt = initBishopAttackRunTime(pos, comb); 

			std::cout << "blockers, attacks:" << std::endl; 
			printBit(comb);
			printBit(attackRt); 
			std::cout << std::endl; 
		}


	}
	



	//testingMagicNumBishop(); 
	


}
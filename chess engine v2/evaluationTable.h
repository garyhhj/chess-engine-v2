#pragma once
#include "macro.h"

/********************
*
*Utility 
*
*********************/



/********************
*
*material score 
*
*********************/

static constexpr int materialScore[12] = {
	100, 300, 10000, 300, 500, 1000, //wPawn, wKnight, wKing, wBishop, wRook, wQueen
	-100, -300, -10000, -300, -500, -1000
};

/********************
*
*mvv lva
*
* calculated as abs(defender Score/attacker Score)
* 
*********************/

//  (Defender) Pawn Knight Bishop   Rook  Queen   King
//(Attackers)
//      Pawn   105    205    305    405    505    605
//    Knight   104    204    304    404    504    604
//    Bishop   103    203    303    403    503    603
//      Rook   102    202    302    402    502    602
//     Queen   101    201    301    401    501    601
//      King   100    200    300    400    500    600

static constexpr int mvvlva[12][12] = //mvvlva[attacker][defender]
{
{ 105, 205, 605, 305, 405, 505,  105, 205, 605, 305, 405, 505, },
{ 104, 204, 604, 304, 404, 504,  104, 204, 604, 304, 404, 504, },
{ 100, 200, 600, 300, 400, 500,  100, 200, 600, 300, 400, 500, },
{ 103, 203, 603, 303, 403, 503,  103, 203, 603, 303, 403, 503, },
{ 102, 202, 602, 302, 402, 502,  102, 202, 602, 302, 402, 502, },
{ 101, 201, 601, 301, 401, 501,  101, 201, 601, 301, 401, 501, },

{ 105, 205, 605, 305, 405, 505,  105, 205, 605, 305, 405, 505, },
{ 104, 204, 604, 304, 404, 504,  104, 204, 604, 304, 404, 504, },
{ 100, 200, 600, 300, 400, 500,  100, 200, 600, 300, 400, 500, },
{ 103, 203, 603, 303, 403, 503,  103, 203, 603, 303, 403, 503, },
{ 102, 202, 602, 302, 402, 502,  102, 202, 602, 302, 402, 502, },
{ 101, 201, 601, 301, 401, 501,  101, 201, 601, 301, 401, 501, },
};

/********************
*
*positional score
*
*********************/


// pawn positional score
static constexpr int wPawnPScore[64] =
{
    90,  90,  90,  90,  90,  90,  90,  90,
    30,  30,  30,  40,  40,  30,  30,  30,
    20,  20,  20,  30,  30,  30,  20,  20,
    10,  10,  10,  20,  20,  10,  10,  10,
     5,   5,  10,  20,  20,   5,   5,   5,
     0,   0,   0,   5,   5,   0,   0,   0,
     0,   0,   0, -10, -10,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,
};

static constexpr int bPawnPScore[64] = 
{
     0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,  10,  10,   0,   0,   0,
     0,   0,   0,  -5,  -5,   0,   0,   0,
    -5,  -5, -10, -20, -20,  -5,  -5,  -5,
   -10, -10, -10, -20, -20, -10, -10, -10,
   -20, -20, -20, -30, -30, -30, -20, -20,
   -30, -30, -30, -40, -40, -30, -30, -30,
   -90, -90, -90, -90, -90, -90, -90, -90,
};

// knight positional score
static constexpr int  wKnightPScore[64] =
{
    -5,   0,   0,   0,   0,   0,   0,  -5,
    -5,   0,   0,  10,  10,   0,   0,  -5,
    -5,   5,  20,  20,  20,  20,   5,  -5,
    -5,  10,  20,  30,  30,  20,  10,  -5,
    -5,  10,  20,  30,  30,  20,  10,  -5,
    -5,   5,  20,  10,  10,  20,   5,  -5,
    -5,   0,   0,   0,   0,   0,   0,  -5,
    -5, -10,   0,   0,   0,   0, -10,  -5,
};

static constexpr int bKnightPScore[64] = 
{
     5,  10,   0,   0,   0,   0,  10,   5,
     5,   0,   0,   0,   0,   0,   0,   5,
     5,  -5, -20, -10, -10, -20,  -5,   5,
     5, -10, -20, -30, -30, -20, -10,   5,
     5, -10, -20, -30, -30, -20, -10,   5,
     5,  -5, -20, -20, -20, -20,  -5,   5,
     5,   0,   0, -10, -10,   0,   0,   5,
     5,   0,   0,   0,   0,   0,   0,   5,
};

// king positional score
static constexpr int  wKingPScore[64] =
{
     0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   5,   5,   5,   5,   0,   0,
     0,   5,   5,  10,  10,   5,   5,   0,
     0,   5,  10,  20,  20,  10,   5,   0,
     0,   5,  10,  20,  20,  10,   5,   0,
     0,   0,   5,  10,  10,   5,   0,   0,
     0,   5,   5, -15, -15,   0,   5,   0,
     0,   0,   5,   0, -15,   0,  10,   0
};

static constexpr int bKingPScore[64] =
{
     0,   0,  -5,   0,  15,   0, -10,   0,
     0,  -5,  -5,  15,  15,   0,  -5,   0,
     0,   0,  -5, -10, -10,  -5,   0,   0,
     0,  -5, -10, -20, -20, -10,  -5,   0,
     0,  -5, -10, -20, -20, -10,  -5,   0,
     0,  -5,  -5, -10, -10,  -5,  -5,   0,
     0,   0,  -5,  -5,  -5,  -5,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,
};


// bishop positional score
static constexpr int wBishopPScore[64] =
{
     0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,  10,  10,   0,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,  10,   0,   0,   0,   0,  10,   0,
     0,  30,   0,   0,   0,   0,  30,   0,
     0,   0, -10,   0,   0, -10,   0,   0,
};

static constexpr int bBishopPScore[64] = 
{
     0,   0,  10,   0,   0,  10,   0,   0,
     0, -30,   0,   0,   0,   0, -30,   0,
     0, -10,   0,   0,   0,   0, -10,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0,   0, -10, -10,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,
};

// rook positional score
static constexpr int wRookPScore[64] =
{
     50,  50,  50,  50,  50,  50,  50,  50,
     50,  50,  50,  50,  50,  50,  50,  50,
      0,   0,  10,  20,  20,  10,   0,   0,
      0,   0,  10,  20,  20,  10,   0,   0,
      0,   0,  10,  20,  20,  10,   0,   0,
      0,   0,  10,  20,  20,  10,   0,   0,
      0,   0,  10,  20,  20,  10,   0,   0,
      0,   0,   0,  20,  20,   0,   0,   0,
};

static constexpr int bRookPScore[64] = 
{
     0,   0,   0, -20, -20,   0,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
     0,   0, -10, -20, -20, -10,   0,   0,
   -50, -50, -50, -50, -50, -50, -50, -50,
   -50, -50, -50, -50, -50, -50, -50, -50,
};


//enum piece : const int {
//	wPawn = 0,
//	wKnight = 1,
//	wKing = 2,
//	wBishop = 3,
//	wRook = 4,
//	wQueen = 5,
//
//	bPawn = 6,
//	bKnight = 7,
//	bKing = 8,
//	bBishop = 9,
//	bRook = 10,
//	bQueen = 11,
//};


/********************
*
*pawn evaluation
*
*********************/

static constexpr map isolatedPawn[64] = { //[square]
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,

    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
    0x4040404040404040, 0xa0a0a0a0a0a0a0a0, 0x5050505050505050, 0x2828282828282828, 0x1414141414141414, 0xa0a0a0a0a0a0a0a, 0x505050505050505, 0x202020202020202,
};

static constexpr map pastPawns[2][64] = { //[side][square]
    {
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0xc000000000000000, 0xe000000000000000, 0x7000000000000000, 0x3800000000000000, 0x1c00000000000000, 0xe00000000000000, 0x700000000000000, 0x300000000000000,
    0xc0c0000000000000, 0xe0e0000000000000, 0x7070000000000000, 0x3838000000000000, 0x1c1c000000000000, 0xe0e000000000000, 0x707000000000000, 0x303000000000000,
    0xc0c0c00000000000, 0xe0e0e00000000000, 0x7070700000000000, 0x3838380000000000, 0x1c1c1c0000000000, 0xe0e0e0000000000, 0x707070000000000, 0x303030000000000,
    0xc0c0c0c000000000, 0xe0e0e0e000000000, 0x7070707000000000, 0x3838383800000000, 0x1c1c1c1c00000000, 0xe0e0e0e00000000, 0x707070700000000, 0x303030300000000,
    0xc0c0c0c0c0000000, 0xe0e0e0e0e0000000, 0x7070707070000000, 0x3838383838000000, 0x1c1c1c1c1c000000, 0xe0e0e0e0e000000, 0x707070707000000, 0x303030303000000,
    0xc0c0c0c0c0c00000, 0xe0e0e0e0e0e00000, 0x7070707070700000, 0x3838383838380000, 0x1c1c1c1c1c1c0000, 0xe0e0e0e0e0e0000, 0x707070707070000, 0x303030303030000,
    0xc0c0c0c0c0c0c000, 0xe0e0e0e0e0e0e000, 0x7070707070707000, 0x3838383838383800, 0x1c1c1c1c1c1c1c00, 0xe0e0e0e0e0e0e00, 0x707070707070700, 0x303030303030300,
    },
    {
    0xc0c0c0c0c0c0c0, 0xe0e0e0e0e0e0e0, 0x70707070707070, 0x38383838383838, 0x1c1c1c1c1c1c1c, 0xe0e0e0e0e0e0e, 0x7070707070707, 0x3030303030303,
    0xc0c0c0c0c0c0, 0xe0e0e0e0e0e0, 0x707070707070, 0x383838383838, 0x1c1c1c1c1c1c, 0xe0e0e0e0e0e, 0x70707070707, 0x30303030303,
    0xc0c0c0c0c0, 0xe0e0e0e0e0, 0x7070707070, 0x3838383838, 0x1c1c1c1c1c, 0xe0e0e0e0e, 0x707070707, 0x303030303,
    0xc0c0c0c0, 0xe0e0e0e0, 0x70707070, 0x38383838, 0x1c1c1c1c, 0xe0e0e0e, 0x7070707, 0x3030303,
    0xc0c0c0, 0xe0e0e0, 0x707070, 0x383838, 0x1c1c1c, 0xe0e0e, 0x70707, 0x30303,
    0xc0c0, 0xe0e0, 0x7070, 0x3838, 0x1c1c, 0xe0e, 0x707, 0x303,
    0xc0, 0xe0, 0x70, 0x38, 0x1c, 0xe, 0x7, 0x3,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    }
};

constexpr int pastPawnScore[2][64] = { //[side][square]
    {
        200, 200, 200, 200, 200, 200, 200, 200,
        100, 100, 100, 100, 100, 100, 100, 100,
        60, 60, 60, 60, 60, 60, 60, 60,
        35, 35, 35, 35, 35, 35, 35, 35,

        20, 20, 20, 20, 20, 20, 20, 20,
        10, 10, 10, 10, 10, 10, 10, 10,
        5, 5, 5, 5, 5, 5, 5, 5,
        0, 0, 0, 0, 0, 0, 0, 0,
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0,
        5, 5, 5, 5, 5, 5, 5, 5,
        10, 10, 10, 10, 10, 10, 10, 10,
        20, 20, 20, 20, 20, 20, 20, 20,

        35, 35, 35, 35, 35, 35, 35, 35,
        60, 60, 60, 60, 60, 60, 60, 60,
        100, 100, 100, 100, 100, 100, 100, 100,
        200, 200, 200, 200, 200, 200, 200, 200,
    }
};